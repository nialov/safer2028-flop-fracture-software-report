name = "frackit"
authors = ["Dennis Gläser"]
interface = "Python code"
input_data = """
The software allows/requires the user to define sets based on orientation and
to constrain the randomly generated fractures of the set with a statistical
distribution. E.g. to define the sampling strategy for a single azimuth set:

~~~python
from frackit.sampling import QuadrilateralSampler as QuadSampler
quadSampler1 = QuadSampler(pointSampler        = makeUniformPointSampler(box),
                           strikeAngleSampler  = gaussianSampler(math.radians(45.0), math.radians(5.0)),
                           dipAngleSampler     = gaussianSampler(math.radians(90.0), math.radians(5.0)),
                           strikeLengthSampler = uniformSampler(0.4, 0.8),
                           dipLengthSampler    = uniformSampler(0.4, 0.8))
~~~

As seen in the above code, the input arguments include defining statistical
constraints for the length.
"""
outputs = """
Frackit can output data in "a number of standard CAD file formats readable by
OpenCASCADE" (`.brep`) and `Gmsh` (`.geo`). Furthermore, the documentation
highlights the possibility of using the output data in conjunction with
`DuMuX` [@flemisch_dumux_2011], a software for flow and transport modelling in porous media (Figure @fig:frackit_with_other_software).

![Workflow sketch of using `frackit` with `Gmsh` [@geuzaine_gmsh_2009] and
`DuMuX` [@flemisch_dumux_2011]. Image from
@glaser_frackit_2020.](src/images/frackit_with_other_software.jpg){#fig:frackit_with_other_software}
"""
remarks = """
The examples and a sufficiently wide range of input parameters for defining
sets of fractures provide a good framework for using `frackit` as a
simple-to-use generator of three-dimensional fractures to potentially augment
traditional two-dimensional fracture characterization workflows.

The author of the software, Dennis Gläser, was responsive and helpful in
communication. An initial draft of using two-dimensional network
characteristics as inputs in Frackit was devised some time ago already as the
interest for collaboration was started.
"""
license = "GPL-3.0-only"

[url]
repository = "https://git.iws.uni-stuttgart.de/tools/frackit"
reference = "https://doi.org/10.21105/joss.02291"
forum = "https://git.iws.uni-stuttgart.de/tools/frackit/-/issues"
documentation = "https://git.iws.uni-stuttgart.de/tools/frackit"

[state_of_documentation]
installation = """
Installation instructions are found on the main documentation page for native
Linux installation on Debian and similar distributions. Installation
instructions are also given for Docker.
"""
usage = """
Usage instructions mostly consists of example cases, such as
<https://git.iws.uni-stuttgart.de/dumux-pub/glaeser2020a>. In the *General
Concept* section it is mentioned that "Frackit does not prescribe a certain
program flow, instead, users are motivated to implement their own applications
using the provided functions, classes and concepts".
"""
examples = """
The repository contains an `appl` folder with multiple examples of use using the
Python bindings of the library. These examples show how to apply the library to
your own data. See e.g.
<https://git.iws.uni-stuttgart.de/tools/frackit/tree/master/appl/example3>.

These examples are mostly focused on geometrical details of producing a DFN (Figure @fig:).
E.g., in example 2, a network is generated inside a cylindrical domain.

![DFN realization generated with `frackit`. Image from `frackit`
[@glaser_frackit_2020]
documentation.](src/images/frackit_dfn_network.png)
"""

[capabilities]
based_on_documentation = """
The main purpose of Frackit is stochastic generation of fracture networks.
Fractures are two-dimensional geometries in three-dimensional space i.e.
without geometric aperture. Frackit is primarily meant for use in numerical
models where e.g. the impact of network topology on hydraulic and mechanical
properties of a porous media can be investigated.
"""
based_on_testing = """

"""
