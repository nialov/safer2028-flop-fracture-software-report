name = "ADFNE"
authors = [
    "Younes Fadakar Alghalandis",
]
interface = "`Matlab` code"
input_data = """
The parameters for fracture generation are defined in `Matlab` code by the
user and include, for example, the aperture or an aperture field function and the definition of
fracture sets (Figure @fig:adfne_dfn_3d_two_sets):

~~~matlab
set1 = Field(DFN('dim',3,'n',100,'dir',15,'ddir',-1e9,'minl',0.05,... % DFN set 1
'mu',0.1,'maxl',0.5,'bbx',[0,0,0,1,1,1],'dip',45,'ddip',-1e7),'Poly');
set2 = Field(DFN('dim',3,'n',100,'dir',165,'ddir',-1e9,'minl',0.05,... % DFN set 2
'mu',0.1,'maxl',0.5,'bbx',[0,0,0,1,1,0.5],'dip',45,'ddip',-1e7,...
'shape','e','q',4),'Poly');
fnm = [set1;set2]; % Combined DFN
Draw('ply',fnm);
Export(gcf,'dfn_3d_sets_adfne1.5.png');
~~~

![A 3D DFN, generated with `ADFNE`, consisting of two fracture sets. Image from the `ADFNE`
[@fadakar_alghalandis_adfne_2017]
manual.](src/images/adfne_dfn_3d_two_sets.png){#fig:adfne_dfn_3d_two_sets}

For the length distributions of the fractures, only exponential distributions are
demonstrated or mentioned in the documentation. Connectivity, according to the
documentation, is defined for the generated fracture networks. A network is
iteratively made to match the desired connectivity values, i.e., it is calculated from
a realized model and the model is accepted or discarded based on whether it matches
the desired connectivity value.
"""
outputs = """
In the documentation, exporting to `png` images for simple visualization is
most commonly illustrated, but the `Export` function further supports data
formats such as `vtk`, `txt`, `xyz` and `geo`. Due to `Matlab` being an
interpreted language, the results are available after code execution as `Matlab`
variables.
"""
remarks = """
The availability of the software has changed over the years. The first version was
released free and open source on *GitHub* but later versions have been behind a
request to the author. Currently, version 1.5 is again freely available on
*GitHub* (<https://github.com/AlghalandisComputing/ADFNE1.5>). Whether further
updates will be released openly is unknown.

`Matlab` is a commercial application, and use of *ADFNE* therefore requires a paid
`Matlab` license. The possibility to run *ADFNE* through *GNU Octave*, a free and
open-source `Matlab` alternative, is mentioned but not demonstrated.

The custom license allows redistribution in source and binary formats provided
that the software is cited and the same copyright notice is distributed.

Overall the functionality appears extensive and is well documented.
"""
license = "Custom"

[url]
repository = "https://github.com/AlghalandisComputing/ADFNE1.5"
documentation = "PDF included with 1.5 zip download"
reference = "https://doi.org/10.1016/j.cageo.2017.02.002"
forum = "https://github.com/AlghalandisComputing/ADFNE1.5/issues"

[state_of_documentation]
installation = """
The software consists of `Matlab` script files which can be executed in the
`Matlab environment.
"""
usage = """
Usage instructions include detailed documentation of the different functions
related to modelling and preprocessing, together with example cases. The instructions
are clear and well written.
"""
examples = """
Examples are provided in the manual along with succinct code examples that
allow the user to reproduce the example figures. The examples usually start
from the generation of a 2D or 3D DFN, either randomly or from defined fracture
sets. Subsequently, after a DFN is generated, flow through it can be modelled
by solving the backbone, i.e., the connected part of the network, where flow
most likely occurs. The largest example contains 500 fractures, which is
considered a medium-sized model. Larger models are noted to be computationally
very intensive.
"""

[capabilities]
based_on_documentation = """
The fracture modelling type is the discrete fracture network method. The
software is capable of both generating the fracture network and simulating flow
within the generated 2D or 3D network. Furthermore, it contains a number of
methods to characterize the generated network, e.g., with a stereonet. The
topology of the generated fracture network is given as a graph of nodes and
edges and the *Connectivity* of the generated network can be calculated with
the software. Flow through the generated fracture network can be modelled in 2D
or 3D with pipes or hybrid pipe-mesh modelling. Overall, the capabilities
appear to be very extensive and cover most needs of DFN modelling and
subsequent analysis both in 2D and 3D.
"""
based_on_testing = """
"""
